import re


class Author:
    def __init__(self, first: str, last: str, middle: str | None = None) -> None:
        self.first = first
        self.middle = middle
        self.last = last

    def __str__(self) -> str:
        return self.first + ' ' + self.middle + ' ' + self.last


class Entry:
    def __init__(self, citekey: str, author: str, title: str, year: str) -> None:
        self.citekey = self._validate_citekey(citekey)
        self.author = self._validate_author(author)
        self.title = title
        self.year = self._validate_year(year)

    def _validate_citekey(self, value: str) -> str:
        if re.match("[\w\-:]+", value):
            return value
        raise ValueError("Citekey error: allowed characters are alphanumerics and -_:")

    def _validate_author(self, value: str) -> list[Author]:
        VON = r"(de |de la |der |van |von|)"
        NO_VON = r"\b(?!de |de la |der |van |von )"

        values = value.split(" and ")
        authors = []

        for item in values:
            # "Last name, First name (Middle name)"" format
            m = re.match(
                rf"(?P<last>{VON}\w+), (?P<first>\w+) (?P<middle>{NO_VON}\w+)$", item
            )
            if m:
                authors.append(Author(m[2], m[1], m[3]))
                continue

            m = re.match(rf"(?P<last>{VON}\w+), (?P<first>\w+)$", item)
            if m:
                authors.append(Author(m[2], m[1]))
                continue

            # "First name (Middle name) Last name" format
            m = re.match(
                rf"(?P<first>\w+) (?P<middle>{NO_VON}\w+) (?P<last>{VON}\w+)$", item
            )
            if m:
                authors.append(Author(m[1], m[3], m[2]))
                continue

            m = re.match(rf"(?P<first>\w+) (?P<last>{VON}\w+)$", item)
            if m:
                authors.append(Author(m[1], m[2]))
                continue

            raise ValueError("Author error: couldn't parse author list")

        return authors

    def _validate_year(self, value: str) -> str:
        if re.match(r"\d{4}(-d{4}|)", value):
            return value
        raise ValueError(
            "Year error: year must be a 4-digit number or a range (e.g. 1999--2000)"
        )


class Article(Entry):
    def __init__(
        self,
        citekey: str,
        author: str,
        title: str,
        year: str,
        journal: str,
        volume: str | None = None,
        number: str | None = None,  # issue designation (e.g. of the yearly volume)
        pages: str | None = None,
    ) -> None:
        super().__init__(citekey, author, title, year)

        self.journal = journal
        self.volume = self._validate_volume(volume) if volume is not None else None
        self.number = number
        self.pages = self._validate_pages(pages) if pages is not None else None

    def _validate_volume(self, value: str) -> int:
        if re.match("\d+", value):
            return int(value)
        raise ValueError("Volume error: volume must consist of digits")

    def _validate_pages(self, value: str) -> str:
        # Pages can be expressed as single page, comma-separated list of pages
        # or page ranges. Roman numerals allowed.
        if re.match("[IVXLCDMivxlcdm\-,]+|[\d\-,]+"):
            return value
        raise ValueError("Pages error: bad formatting")
